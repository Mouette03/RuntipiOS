name: Build and Release RuntipiOS

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for the release'
        required: false
        default: 'dev'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      repo_lower: ${{ steps.repo.outputs.repo_lower }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION_RAW="${{ github.event.inputs.version }}"
          elif [ "${{ github.event_name }}" = "release" ]; then
            VERSION_RAW="${{ github.event.release.tag_name }}"
          else
            if echo "$GITHUB_REF" | grep -q "^refs/tags/"; then
              VERSION_RAW=${GITHUB_REF#refs/tags/}
            elif echo "$GITHUB_REF" | grep -q "^refs/heads/"; then
              VERSION_RAW=${GITHUB_REF#refs/heads/}
            else
              VERSION_RAW=$GITHUB_REF
            fi
          fi
          VERSION=${VERSION_RAW#v}
          VERSION=${VERSION#V}
          SANITIZED=$(echo "$VERSION" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9_.-]/-/g')
          SANITIZED=$(echo "$SANITIZED" | sed 's/^-*//;s/-*$//')
          echo "version=$SANITIZED" >> $GITHUB_OUTPUT
          echo "version_raw=$VERSION_RAW" >> $GITHUB_OUTPUT
          echo "Building version: ${SANITIZED} (raw: ${VERSION_RAW})"

      - name: Sanitize repository name for tags
        id: repo
        run: |
          REPO="${{ github.repository }}"
          REPO_LC=$(echo "$REPO" | tr '[:upper:]' '[:lower:]')
          echo "repo_lower=$REPO_LC" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push builder image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.repo.outputs.repo_lower }}:build-${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ steps.repo.outputs.repo_lower }}:v${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


  build-pi:
    needs: build-image
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare output directory
        run: mkdir -p output

      - name: Pull builder image
        run: |
          IMAGE=${{ env.REGISTRY }}/${{ needs.build-image.outputs.repo_lower }}:build-${{ needs.build-image.outputs.version }}
          echo "Using builder image: $IMAGE"
          docker pull $IMAGE || true
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Build Raspberry Pi image
        run: |
          IMAGE=${IMAGE}
          mkdir -p output
          echo "Running build-pi-image.sh (Raspberry Pi arm64 image)"
          docker run --rm --privileged \
            -e ARCH=arm64 \
            -v $(pwd)/output:/build/output \
            $IMAGE /bin/bash -lc "/build/scripts/build-pi-image.sh"

      - name: Generate checksums
        run: |
          cd output
          sha256sum * > SHA256SUMS
          cat SHA256SUMS

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: runtipios-pi-${{ needs.build-image.outputs.version }}
          path: |
            output/*
          retention-days: 30

  create-release:
    needs: build-pi
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && needs.build-image.outputs.version != 'dev')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4


      - name: Download Pi artifact
        uses: actions/download-artifact@v3
        with:
          name: runtipios-pi-${{ needs.build-image.outputs.version }}
          path: artifacts/pi

      - name: Create Release and upload assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build-image.outputs.version }}
          files: |
            artifacts/pi/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
